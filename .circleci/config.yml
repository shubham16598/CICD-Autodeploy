version: 2.1

jobs:
  hello-world:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "First Job"
  # The Frontend job
  frontend-lint:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd frontend && npm install

      - run:
          name: Testing
          command: cd frontend && npm run build

  frontend-test:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd frontend && npm install

      - run:
          name: Testing
          command: cd frontend && npm run test

  backend-lint:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd backend && npm install

      - run:
          name: Testing
          command: cd backend && npm run build

  backend-test:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd backend && npm install

      - run:
          name: Testing
          command: cd backend && npm run test
  audit-check-frontend:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd frontend && npm install

      - run:
          name: Testing
          command: cd frontend && npm audit --audit-level=critical

  audit-check-backend:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd backend && npm install

      - run:
          name: Testing
          command: cd backend && npm audit --audit-level=critical

  backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Backend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws ec2 describe-instances \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-2 \
              --output text >> .circleci/ansible/url.txt
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/url.txt

  frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend Infrastructure
          command: |
            # aws cloudformation describe-stack-resources \
            #   --stack-name "${PRODUCTION_FRONTEND_STACK}" \
            #   --query 'StackResources[?LogicalResourceId==`WebsiteBucket`].PhysicalResourceId' \
            #   --region us-east-2 \
            #   --output text >> .circleci/ansible/frontend.txt
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/frontend.txt
  add-backend-ip-to-inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: /tmp/.circleci
      - checkout
      - run:
          name: output of files
          command: |
            ls
            cat /tmp/.circleci/project/.circleci/ansible/frontend.txt
            cat /tmp/.circleci/project/.circleci/ansible/url.txt
      - run:
          name: Backend IP to ansible inventory
          command: |
            aws ec2 decribe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-2 \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2

  backend_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/.circleci
      - add_ssh_keys:
          fingerprints: ["5c:90:ff:21:74:44:c0:8c:98:bf:64:bf:a0:0e:c4:63"]

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/main.yml

workflows:
  default:
    jobs:
      # - hello-world
      # - frontend-lint:
      #     requires:
      #       - hello-world
      # - frontend-test:
      #     requires:
      #       - frontend-lint
      # - backend-lint:
      #     requires:
      #       - frontend-test
      # - backend-test:
      #     requires:
      #       - backend-lint
      # - audit-check-frontend:
      #     requires:
      #       - backend-test
      # - audit-check-backend:
      #     requires:
      #       - audit-check-frontend

      - backend-infrastructure

      - frontend-infrastructure:
          requires:
            - backend-infrastructure
      - add-backend-ip-to-inventory:
          requires:
            - frontend-infrastructure
