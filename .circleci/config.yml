version: 2.1

jobs:
  hello-world:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "First Job"
  # The Frontend job
  frontend-lint:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd frontend && npm install

      - run:
          name: Testing
          command: cd frontend && npm run build

  frontend-test:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd frontend && npm install

      - run:
          name: Testing
          command: cd frontend && npm run test

  backend-lint:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd backend && npm install

      - run:
          name: Testing
          command: cd backend && npm run build

  backend-test:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd backend && npm install

      - run:
          name: Testing
          command: cd backend && npm run test
  audit-check-frontend:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd frontend && npm install

      - run:
          name: Testing
          command: cd frontend && npm audit --audit-level=critical

  audit-check-backend:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd backend && npm install

      - run:
          name: Testing
          command: cd backend && npm audit --audit-level=critical

  backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: echo "[all]" > ~/url.txt
      - run:
          name: Backend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws ec2 describe-instances \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-2 \
              --output text >> ~/url.txt
            PUBLIC_DNS=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=backend-${CIRCLE_WORKFLOW_ID}" --query 'Reservations[*].Instances[*].PublicIpAddress' --region us-east-2 --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data "${PUBLIC_DNS}" \
               https://api.memstash.io/values/public_dns
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - url.txt

  frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: echo "[all]" > ~/frontend.txt
      - run:
          name: Frontend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} \
              --region us-east-2 \
              --output text >> ~/frontend.txt
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - frontend.txt
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
  add-backend-ip-to-inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/
      - checkout
      - run:
          name: output of files
          command: |

            cat ~/frontend.txt
            cat ~/url.txt
      - run:
          name: Backend IP to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-2 \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2

  config_backend_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - "75:c1:d9:23:d3:93:a3:10:36:95:e2:c8:89:09:3a:19"

      - run:
          name: output of files
          command: |
            cat ~/url.txt
      - run:
          name: Env Variables
          command: |
            echo "ENVIRONMENT=production" > backend/.env
            echo "NODE_ENV=production" >> backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
            echo "ENVIRONMENT=development" > backend/development.env
            echo "NODE_ENV=development" >> backend/development.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/development.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/development.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/development.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/development.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/development.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> backend/development.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/development.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/development.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/development.env
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/url.txt .circleci/ansible/playbook.yml
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2  

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Frontend Build
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            export API_URL="http://${PUBLIC_DNS}:3030"
            echo API_URL=${API_URL}
            cd frontend
            npm install
            npm run build
      - run:
          name: S3 Bucket
          command: |
            aws s3 sync ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ 
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Smoke test on frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Smoke test on backend
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            curl -s "http://${PUBLIC_DNS}:3030/api/status"

  delete-old:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Promote the new deployment and delete the old one
          command: |
            OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='CircleCI-WorkflowID'].Value" --output text)
            echo OLD_CIRCLE_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID}
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            if [ -n "${OLD_CIRCLE_WORKFLOW_ID}" ] && [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID}" ]]
            then
              aws s3 rm s3://udapeople-${OLD_CIRCLE_WORKFLOW_ID}/ --recursive
              aws cloudformation delete-stack --stack-name frontend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name backend-${OLD_CIRCLE_WORKFLOW_ID}
            fi
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --region us-east-2

workflows:
  default:
    jobs:
      - hello-world
      
      - frontend-lint:
          requires:
            - hello-world

      - frontend-test:
          requires:
            - frontend-lint

      - backend-lint:
          requires:
            - frontend-test

      - backend-test:
          requires:
            - backend-lint

      - audit-check-frontend:
          requires:
            - backend-test

      - audit-check-backend:
          requires:
            - audit-check-frontend


      - backend-infrastructure:
          requires:
            - audit-check-backend
          filters:
            branches:
              only: master

      - frontend-infrastructure:
          requires:
            - backend-infrastructure
          filters:
            branches:
              only: master

      - add-backend-ip-to-inventory:
          requires:
            - frontend-infrastructure
          filters:
            branches:
              only: master

      - config_backend_infrastructure:
          requires:
            - add-backend-ip-to-inventory
          filters:
            branches:
              only: master

      - deploy-frontend:
          requires:
            - config_backend_infrastructure
          filters:
            branches:
              only: master

      - smoke-test:
          requires:
            - deploy-frontend
          filters:
            branches:
              only: master

      - delete-old:
          requires:
            - smoke-test
          filters:
            branches:
              only: master

